Resolver el siguiente problema con MONITORES. Simular el funcionamiento de un Complejo de Canchas de Paddle que posee 10 canchas y donde hay UN robot encargado de distribuir a las personas en las canchas.
Al complejo acuden 40 personas a jugar. Cuando una persona llega el robot le indique el número de cancha a la cual debe ir, para que se dirija a ella; cuando han llegado los 4 jugadores a la cancha, comienzan a jugar el partido que dura 60 minutos; al terminar el partido las 4 personas se retiran.
El encargado asigna el número de cancha según el orden de llegada (los 4 primeros a la cancha 1, los siguientes 4 a la 2 y así sucesivamente). Nota: maximizar la concurrencia

Process Jugador[id =1..40]{
    int cancha;
    Fila.Llegada();
    Robot.Cancha(cancha);
    Fila.Salida();
    Cancha[cancha].Llegue();
}

Process Partido[id = 1..10]{
    Cancha[id].Iniciar();
    delay(60);
    Cancha[id].Terminar();
}

Monitor Cancha[id = 1..10]{
int jugadores = 0; 
cond inicio,final;

    
    Procedure Llegue(){
        jugadores++; 
        if (jugadores == 22){
            signal(inicio);
        }
        wait(final);
    }

    Procedure Iniciar(){
        if (jugadores < 22){
            wait(inicio);
        }
    }

    Procedure Terminar(){
        signal_all(final);
    }
}


Monitor Fila{
    int esperando = 0; 
    boolean libre = false;
    cond espera;

    Procedure Llegada(){
        if (libre){
            libre = false;
        }
        else{
            esperando++;
            wait(espera);
        }
    }

    Procedure Salida(){
        if (esperando == 0){
            libre = true;
        }
        else{
            esperando--;
            signal(espera);
        }
    }
}

Monitor Robot{
    int contador_jugadores = 0;

    Procedure NumeroCancha(num_cancha : out int){
        num_cancha = (contador_jugadores // 4) + 1;  #division entera
        contador_jugadores++; 
    }
}
