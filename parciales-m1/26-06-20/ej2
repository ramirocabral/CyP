# 2. Resolver con SEMÁFOROS la siguiente situación. En una herrería hay 15 empleados que 
# forman 5 grupos de 3 personas; los grupos se forman de acuerdo al orden de llegada (los 3 
# primeros pertenecen al grupo 1, los 3 siguientes al grupo 2, y así sucesivamente). Ni bien 
# conoce el grupo al que pertenece el empleado comienza a trabajar (no debe esperar al resto 
# de grupo para comenzar). Cada grupo debe hacer exactamente P unidades de un producto 
# (cada unidad es hecha por un único empleado). Al terminar de hacer las P unidades de un 
# grupo, sus 3 empleados se deben juntar para retirarse juntos. Nota: maximizar la 
# concurrencia; ningún grupo puede hacer unidades de más. 

int empleados_listos = 0;
sem mutex;
sem mutex_grupo[5] = ([5] 1);
int cant_producida_grupo[5] = ([5] 0);
int grupo_listos[5] = ([5] 0);
sem mutex_finalizados = ([5] 0);

Process Empleado[id = 0..14]{
    P(mutex)
    int grupo = (empleados_listos // 3) + 1;
    empleados_listos++
    V(mutex)

    P(mutex_grupo[grupo])
    while(cant_producida_grupo[grupo] < P){
        cant_producida_grupo[grupo]++;
        V(mutex_grupo[grupo]);
        //hacer unidad
        P(mutex_grupo[grupo]);
    }

    V(mutex_grupo[grupo]);  //mutex = 1

    P(mutex_grupo[grupo]);
    grupo_listos[grupo]++;
    if (grupo_listos[grupo] < 3){
        V(mutex_grupo[grupo]);
        P(mutex_finalizados[grupo]);
    }
    else{
        V(mutex_grupo[grupo]);
        for i=1..2{
            V(mutex_finalizados[grupo]);
        }
    }
}
